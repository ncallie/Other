import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Program {
    public static StringBuilder res = new StringBuilder();
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int countTests = Integer.parseInt(reader.readLine());
        for (int test = 0; test < countTests; ++test) {
            reader.readLine();
            String[] s = reader.readLine().split(" ");
            int count–°oupe = Integer.parseInt(s[0]);
            int requests = Integer.parseInt(s[1]);
            List<Integer[][]> wagon = new ArrayList<>(count–°oupe);
            int seat = 1;
            for (int i = 0; i < count–°oupe; ++i) {
                Integer[][] coupe = new Integer[2][2];
                coupe[0][0] = seat++;
                coupe[0][1] = 0;
                coupe[1][0] = seat++;
                coupe[1][1] = 0;
                wagon.add(coupe);
            }
            for (int i = 0; i < requests; ++i) {
                String[] s1 = reader.readLine().split(" ");
                int request = Integer.parseInt(s1[0]);
                switch (request) {
                    case 1:
                        buySeat(wagon, Integer.parseInt(s1[1]));
                        break;
                    case 2:
                        returnSeat(wagon, Integer.parseInt(s1[1]));
                        break;
                    case 3:
                        buyCoupe(wagon);
                        break;
                }
            }
            System.out.print(res.append("\n"));
            res.setLength(0);
        }
    }

    private static void buyCoupe(List<Integer[][]> wagon) {

        for (Integer[][] coupe : wagon) {
            if (coupe[0][1] == 0 && coupe[1][1] == 0) {
                coupe[0][1] = 1;
                coupe[1][1] = 1;
                res.append("SUCCESS ").append(coupe[0][0]).append("-").append(coupe[1][0]).append("\n");
                return;
            }
        }
        res.append("FAIL\n");
    }

    private static void returnSeat(List<Integer[][]> wagon, int seat) {
        int numCoupe = seat % 2 == 0 ? (seat / 2) - 1 : (seat / 2);
        Integer[][] integers = wagon.get(numCoupe);
        if (seat % 2 != 0) {
            if (integers[0][1] == 1) {
                integers[0][1] = 0;
                wagon.set(numCoupe, integers);
                res.append("SUCCESS\n");
            }
            else {
                res.append("FAIL\n");
            }
        }
        else {
            if (integers[1][1] == 1) {
                integers[1][1] = 0;
                wagon.set(numCoupe, integers);
                res.append("SUCCESS\n");
            }
            else {
                res.append("FAIL\n");
            }
        }

    }

    private static void buySeat(List<Integer[][]> wagon, int seat) {
        int numCoupe = seat % 2 == 0 ? (seat / 2) - 1 : (seat / 2);
        Integer[][] integers = wagon.get(numCoupe);
        if (seat % 2 != 0) {
            if (integers[0][1] == 0) {
                integers[0][1] = 1;
                wagon.set(numCoupe, integers);
                res.append("SUCCESS\n");
            }
            else {
                res.append("FAIL\n");
            }
        }
        else {
            if (integers[1][1] == 0) {
                integers[1][1] = 1;
                wagon.set(numCoupe, integers);
                res.append("SUCCESS\n");
            }
            else {
                res.append("FAIL\n");
            }
        }
    }
}

// E. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∞ (20 –±–∞–ª–ª–æ–≤)
// –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç10 —Å–µ–∫—É–Ω–¥
// –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç256 –º–µ–≥–∞–±–∞–π—Ç
// –≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
// –≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
// –ï—Å—Ç—å –≤–∞–≥–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º ùëõ –∫—É–ø–µ, –∫–∞–∂–¥–æ–µ –∫—É–ø–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –º–µ—Å—Ç–∞ (–∫—É–ø–µ —Ç–∏–ø–∞ –°–í). –ú–µ—Å—Ç–∞ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –æ—Ç 1 –¥–æ 2ùëõ –ø–æ–¥—Ä—è–¥ (–º–µ—Å—Ç–∞ 1-2 ‚Äî —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∫—É–ø–µ, –º–µ—Å—Ç–∞ 3-4 ‚Äî –≤—Ç–æ—Ä–æ–µ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ). –ù–∞–¥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç—Ä–∏ –≤–∏–¥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:

// –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ (–Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å SUCCESS –∏–ª–∏ FAIL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ –æ–Ω–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–µ—Ç) –∏ –ø–æ–º–µ—Ç–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç—ã–º;
// –≤–µ—Ä–Ω—É—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ (–æ—Ç–≤–µ—Ç–∏—Ç—å SUCCESS –∏–ª–∏ FAIL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ–ø–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç) –∏ —Ä–∞–∑–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ, —Ç–æ –µ—Å—Ç—å SUCCESS –Ω–∞–¥–æ –≤—ã–≤–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –±—ã–ª–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç–æ;
// –≤—ã–∫—É–ø–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º –∫—É–ø–µ (–æ—Ç–≤–µ—Ç–∏—Ç—å –ª–∏–±–æ FAIL, –ª–∏–±–æ –≤—ã–≤–µ—Å—Ç–∏ SUCCESS X-Y ‚Äî –≥—Ä–∞–Ω–∏—Ü—É –º–µ—Å—Ç –≤ –ø–µ—Ä–≤–æ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤–æ–±–æ–¥–Ω–æ–º –∫—É–ø–µ), –ø–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –º–µ—Å—Ç–∞ —ç—Ç–æ–≥–æ –∫—É–ø–µ –∑–∞–Ω—è—Ç—ã–º–∏.
// –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã.

// –ù–µ–ø–æ–ª–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ) –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ü–µ–Ω–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–º –±–∞–ª–ª–æ–º.

// –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùë° (1‚â§ùë°‚â§104) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—Å—Ç–µ.

// –î–∞–ª–µ–µ —Å–ª–µ–¥—É—é—Ç –æ–ø–∏—Å–∞–Ω–∏—è ùë° –Ω–∞–±–æ—Ä–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞–±–æ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.

// –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∞–Ω—ã –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëû (1‚â§ùëõ‚â§3‚ãÖ105, 1‚â§ùëö‚â§6‚ãÖ105) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–µ –≤ –≤–∞–≥–æ–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

// –î–∞–ª–µ–µ —Å–ª–µ–¥—É—é—Ç —Å–∞–º–∏ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ:

// –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ –¥–≤–∞ —á–∏—Å–ª–∞: ¬´1 p¬ª, –≥–¥–µ ùëù ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 2ùëõ (–Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞);
// –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–∞—á—É –±–∏–ª–µ—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –º–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ –¥–≤–∞ —á–∏—Å–ª–∞: ¬´2 p¬ª, –≥–¥–µ ùëù ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 2ùëõ (–Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞);
// –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å –ø–µ—Ä–≤–æ–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤–æ–±–æ–¥–Ω–æ–µ –∫—É–ø–µ, –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–∏–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º 3.
// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π ùëõ –ø–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 3‚ãÖ105. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π ùëö –ø–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 6‚ãÖ105.

// –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–≥–æ, –ø–æ –æ–¥–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫–µ:

// –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ 1-–≥–æ —Ç–∏–ø–∞: –µ—Å–ª–∏ –º–µ—Å—Ç–æ –±—ã–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ, —Ç–æ –≤—ã–≤–µ–¥–∏—Ç–µ SUCCESS, –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–∏—Ç–µ FAIL;
// –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ 2-–≥–æ —Ç–∏–ø–∞: –µ—Å–ª–∏ –º–µ—Å—Ç–æ –±—ã–ª–æ –∑–∞–Ω—è—Ç–æ, —Ç–æ –≤—ã–≤–µ–¥–∏—Ç–µ SUCCESS, –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–∏—Ç–µ FAIL;
// –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ 3-–≥–æ —Ç–∏–ø–∞: –µ—Å–ª–∏ –±—ã–ª–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–æ–µ –∫—É–ø–µ, —Ç–æ –≤—ã–≤–µ–¥–∏—Ç–µ SUCCESS X-Y (–≥–¥–µ X-Y ‚Äî –º–µ—Å—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫—É–ø–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—à–ª–∞ –≤–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞), –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–∏—Ç–µ FAIL.
// –í—ã–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.